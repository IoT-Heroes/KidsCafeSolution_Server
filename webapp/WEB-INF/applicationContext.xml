<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<context:annotation-config />

	<!-- auto proxy -->
	<aop:aspectj-autoproxy />


	<context:component-scan
		base-package="com.heroes.repository, com.heroes.service, com.heroes.aspect">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
	</context:component-scan>

	<!-- properties -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations"
			value="classpath:/database/jdbc.properties" />
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<!-- JDBC-PostgreSQL -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- MyBatis SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis/configuration.xml" />
	</bean>


	<!-- MyBatis SqlSessionTemplate -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>


	<!-- Trigger 1 -->
	<bean id="testJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="DepartmentsService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="testCall" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="false" />
	</bean>

	<!-- Trigger 1 -->
	<bean id="testJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="testJob" />
		<!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
		<property name="cronExpression" value="0 0/1 * * * ?" />
	</bean>

	<!-- Trigger 2 -->
	<bean id="testJob2"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="DepartmentsService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="testCall2" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="false" />
	</bean>

	<!-- Trigger 2 -->
	<bean id="testJobTrigger2"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="testJob2" />
		<!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
		<property name="cronExpression" value="0 0/2 * * * ?" />
	</bean>

	<!-- 테스트용 스케줄러 -->
	<bean id="testJobScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
			<list>
				<ref bean="testJobTrigger" />
				<ref bean="testJobTrigger2" />
			</list>
		</property>
	</bean>
	<!-- QUARTZ -->

</beans>